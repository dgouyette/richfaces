<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright ${year}, Red Hat, 
    Inc. and individual contributors by the @authors tag. See the copyright.txt 
    in the distribution for a full listing of individual contributors. This is 
    free software; you can redistribute it and/or modify it under the terms of 
    the GNU Lesser General Public License as published by the Free Software Foundation; 
    either version 2.1 of the License, or (at your option) any later version. 
    This software is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
    FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more 
    details. You should have received a copy of the GNU Lesser General Public 
    License along with this software; if not, write to the Free Software Foundation, 
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the 
    FSF site: http://www.fsf.org. -->
<cdk:properties xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:cdk="http://jboss.org/schema/richfaces/cdk/extensions"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee">

    
    <property>
        <property-name>nodeClass</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            Space-separated list of CSS style class(es) to be applied to the tree nodes.
        </description>
    </property>
    
    <property>
        <property-name>nodeType</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            Determines which treeNode should be used for rendering. Should contain EL expressions which uses request-scoped variable
            with name defied in attribute 'var'.
        </description>
    </property>

    <property>
        <property-name>onnodetoggle</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            The client-side script method to be called after the node is toggled.
        </description>
    </property>
    <property>
        <property-name>onselectionchange</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            The client-side script method to be called after the selection is changed.
        </description>
    </property>
    <property>
        <property-name>onbeforenodetoggle</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            The client-side script method to be called before the node is toggled.
        </description>
    </property>
    <property>
        <property-name>onbeforeselectionchange</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            The client-side script method to be called before the selection is changed.
        </description>
    </property>
    
    
    <property>
        <property-name>selection</property-name>
        <property-class>java.util.Collection</property-class>
        <description>
            The collections of selected nodes.
        </description>
    </property>
    
    <property>
        <property-name>selectionType</property-name>
        <property-class>org.richfaces.component.SwitchType</property-class>
        <description>
            The type of type of the selection - ajax (default), client, server.
        </description>
    </property>
    <property>
        <property-name>toggleType</property-name>
        <property-class>org.richfaces.component.SwitchType</property-class>
        <description>
            The type of type of the node toggling - ajax (default), client, server.
        </description>
    </property>
    
    <property>
        <property-name>toggleNodeEvent</property-name>
        <property-class>java.lang.String</property-class>
        <description>
            Client-side event used for toggling tree nodes (click, dblclick, etc.)
        </description>
    </property>

    <property>
        <property-name>selectionChangeListener</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <cdk:generate>false</cdk:generate>
        </property-extension>
        <description>
            MethodExpression representing an tree node toggle listener method that will be notified when the tree node
            is toggled. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a
            return type of void, or to a public method that takes no arguments with a return type of void.
            In the latter case, the method has no way of easily knowing where the event came from, but this can be
            useful in cases where a notification is needed that "some action happened".
        </description>
    </property>
    <property>
        <property-name>toggleListener</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <cdk:generate>false</cdk:generate>
        </property-extension>
        <description>
            MethodExpression representing an tree node toggle listener method that will be notified when the tree node
            is selected. The expression must evaluate to a public method that takes an TreeSelectionChangeEvent
            parameter, with a return type of void, or to a public method that takes no arguments with a return type of
            void. In the latter case, the method has no way of easily knowing where the event came from, but this can
            be useful in cases where a notification is needed that "some action happened".
        </description>
    </property>
    
    
    <!-- copied from iteration-props.xml -->
    <property>
        <description>
            Boolean attribute that defines whether this iteration component will reset saved children's state before
            rendering. By default state is reset if there are no faces messages with severity error or higher
        </description>
        <property-name>keepSaved</property-name>
        <type>boolean</type>
    </property>
    
    <property>
        <description>
            Provides access to the row key in a Request scope
        </description>
        <property-name>rowKeyVar</property-name>
        <type>java.lang.String</type>
    </property>
    
    <property>
        <description>
            Provides access to the state in a Request scope
        </description>
        <property-name>stateVar</property-name>
        <type>java.lang.String</type>
    </property>
    
    <property>
        <description>
            Points to the data model
        </description>
        <property-name>value</property-name>
        <type>java.lang.Object</type>
    </property>
    
    <property>
        <description>
            A request-scope attribute via which the data object for the current row will be used when iterating
        </description>
        <property-name>var</property-name>
        <type>java.lang.String</type>
    </property>

</cdk:properties>
